{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE ImportQualifiedPost #-}
{-# LANGUAGE InstanceSigs #-}

module XAG.Graph
  ( Node (..),
    Graph (..),
    cover,
    dominatingAnds,
    eval,
    freeVariables,
    nodeRefs,
    -- normalize,
    outputs,
    valid,
    validNodes,
  )
where

import Data.Bits (Bits (xor, (.&.)))
import Data.IntMap qualified as IntMap
import Data.IntSet qualified as IntSet
import Data.List (sort)
import GHC.Float (sqrtFloat)
import GHC.Generics (Generic)
import Test.QuickCheck qualified as QC

-- The Graph is a list of Node; each node has a nodeId, uniquely identifying it.
-- Nodes are ordered by increasing nodeId, and the graph should be acyclic, with
-- each Node referring only to prior XagNodes via its inputs. References to
-- nodeIds not in the list are free variables.

-- Although we include Const nodes for flexibility, you can eliminate them from
-- any graph by transforming to a graph that applies Not to free variables
-- (assuming there are free variables in the graph to start with, that is -- if
-- there are not then the graph isn't very interesting, of course).

-- Alternatively, we could have included just Const True, and not Not, by
-- substituting (Xor True x) for (Not x). This would also be obfuscatory for the
-- kind of input and output we deal with.

data Node
  = Const {nodeId :: !Int, value :: !Bool}
  | Not {nodeId :: !Int, xIn :: !Int}
  | Xor {nodeId :: !Int, xIn :: !Int, yIn :: !Int}
  | And {nodeId :: !Int, xIn :: !Int, yIn :: !Int}
  deriving (Eq, Generic, Read, Show)

instance Ord Node where
  compare :: Node -> Node -> Ordering
  compare x y
    | nidOrd == EQ = compareType x y
    | otherwise = nidOrd
    where
      nidOrd = compare (nodeId x) (nodeId y)
      -- Same-type: drill down
      compareType (Const _ xVal) (Const _ yVal) = compare xVal yVal
      compareType (Not _ xXIn) (Not _ yXIn) = compare xXIn yXIn
      compareType (Xor _ xXIn xYIn) (Xor _ yXIn yYIn) = compare xXIn yXIn <> compare xYIn yYIn
      compareType (And _ xXIn xYIn) (And _ yXIn yYIn) = compare xXIn yXIn <> compare xYIn yYIn
      -- Different-type: early out
      compareType (Const {}) _ = LT
      compareType (Not {}) _ = LT
      compareType (Xor {}) _ = LT
      compareType (And {}) _ = undefined

data Graph = Graph {xagNodes :: [Node], inputOrder :: [Int], outputOrder :: [Int]}
  deriving (Eq, Generic, Ord, Read, Show)

-- compute the set of free variables used by this graph
freeVariables :: [Node] -> IntSet.IntSet
freeVariables allNodes = freeVariablesRev (reverse allNodes) IntSet.empty
  where
    freeVariablesRev [] freeSoFar = freeSoFar
    freeVariablesRev (node : nodes) freeSoFar =
      IntSet.delete
        (nodeId node)
        (freeVariablesRev nodes (IntSet.union (nodeRefs node) freeSoFar))

-- compute the list of outputs possibly generated by this graph
outputs :: [Node] -> IntSet.IntSet
outputs nodes = IntSet.fromList (map nodeId nodes)

-- countAnd :: Graph -> Int
-- countAnd (Graph nodes) = foldr (\node -> case And _ _ -> 1; _ -> 0) 0 nodes

-- countAndInputs :: Graph -> Int
-- countAndInputs (Graph nodes) = foldr (\node -> case And _ ins -> length ins; _ -> 0) 0 nodes

-- compute a subset of the graph producing the given outputs
cover :: IntSet.IntSet -> [Node] -> [Node]
cover initialIds allNodes = reverse (coverRev initialIds (reverse allNodes))
  where
    coverRev _ [] = []
    coverRev coverIds (node : nodes) =
      if IntSet.member (nodeId node) coverIds
        then node : coverRev (IntSet.union coverIds (nodeRefs node)) nodes
        else coverRev coverIds nodes

-- The returns from this are a list of And nodes And-directly dominating the
-- ofId node -- that is, the dominators may be separated by Xor or Not nodes,
-- but there aren't any intervening Ands.
-- The returned list contains tuples with the node id of the dominating And,
-- the id of the node that And was reached via, and the id of the node it
-- wasn't reached via. In the case that a dominator is reached via multiple
-- paths simultaneously, the node will appear twice in the list with both node
-- orders.
dominatingAnds :: Int -> [Node] -> [(Int, (Int, Int))]
dominatingAnds ofId allNodes = dominatingAndsOfId (IntSet.singleton ofId) (skipToNode allNodes)
  where
    -- Don't even start looking until after the subject node
    skipToNode :: [Node] -> [Node]
    skipToNode [] = []
    skipToNode wholeList@(node : nodes)
      | nodeId node > ofId = wholeList
      | otherwise = skipToNode nodes

    dominatingAndsOfId :: IntSet.IntSet -> [Node] -> [(Int, (Int, Int))]
    dominatingAndsOfId _ [] = []
    dominatingAndsOfId searchSet (node : nodes) =
      case node of
        -- Const nodes can't dominate anything
        Const _ _ -> dominatingAndsOfId searchSet nodes
        -- Not: Add this node to the search list if it's controlled by anything in the search list
        Not nId xId -> dominatingAndsOfId (expandSearchIf (IntSet.member xId searchSet) nId) nodes
        -- Xor: Add this node to the search list if it's controlled by anything in the search list
        Xor nId xId yId -> dominatingAndsOfId (expandSearchIf (IntSet.member xId searchSet || IntSet.member yId searchSet) nId) nodes
        -- And gate found! But don't go looking for And dominating And, we only look 1 deep
        And nId xId yId -> withXYDoms
          where
            withXYDoms = if IntSet.member xId searchSet then (nId, (xId, yId)) : withYDoms else withYDoms
            withYDoms = if IntSet.member yId searchSet then (nId, (yId, xId)) : restOfDoms else restOfDoms
            restOfDoms = dominatingAndsOfId searchSet nodes
      where
        expandSearchIf False _ = searchSet
        expandSearchIf True nId = IntSet.insert nId searchSet

nodeRefs :: Node -> IntSet.IntSet
nodeRefs (Not _ x) = IntSet.singleton x
nodeRefs (Xor _ x y) = IntSet.fromList [x, y]
nodeRefs (And _ x y) = IntSet.fromList [x, y]
nodeRefs _ = IntSet.empty

-- Do the most trivial operations required to reduce the complexity of an XAG
-- normalize :: Graph -> Graph
-- normalize (Graph allNodes) =
--   case firstTrueConst allNodes of
--     Nothing -> Graph $ filterNodes IntSet.empty allNodes
--       where
--         -- If no constant true is present in the graph, there must also not be
--         -- any trivial true outputs. This arises because you can't get a true
--         -- output from an XOR or AND gate without a true input, therefore any
--         -- true outputs must be nontrivial. This is a convenient fact for us
--         -- in that the constant will always be there if we need it, but then
--         -- we still need to special-case the reduction when that happens.
--         filterNodes :: IntSet.IntSet -> [Node] -> [Node]
--         filterNodes _ [] = []
--         -- Add constant false to the trivial set
--         filterNodes trivialFalse (Const nid False : nodes) =
--           filterNodes (IntSet.insert nid trivialFalse) nodes
--         filterNodes _ (Const _ True : _) = undefined
--         -- Xor:
--         -- Remove trivial false inputs;
--         -- Remove inputs that appear an even number of times;
--         -- Remap trivial true inputs to the first constant true found.
--         filterNodes trivialFalse (Xor nid x y : nodes) =
--           Xor nid gatheredInputs : filterNodes trivialFalse nodes
--           where
--             gatheredInputs = IntSet.foldr xorGather IntSet.empty (IntSet.fromList [x, y])

--             xorGather inp gathered
--               -- Ignore trivial false inputs
--               | IntSet.member inp trivialFalse = gathered
--               -- Track whether inputs have canceled themselves out
--               | otherwise = invertMembership inp gathered

--             invertMembership n s
--               | IntSet.member n s = IntSet.delete n s
--               | otherwise = IntSet.insert n s

--         -- And:
--         -- If any input is trivial false, add this to the trivial false set;
--         -- Otherwise include it with repeated inputs removed.
--         filterNodes trivialFalse (And nid andInputs : nodes) =
--           if not (IntSet.disjoint trivialFalse andInputs)
--             then filterNodes (IntSet.insert nid trivialFalse) nodes
--             else And nid andInputs : filterNodes trivialFalse nodes
--     Just trueId -> Graph $ Const trueId True : filterNodes IntSet.empty IntSet.empty allNodes
--       where
--         filterNodes :: IntSet.IntSet -> IntSet.IntSet -> [Node] -> [Node]
--         filterNodes _ _ [] = []
--         -- Add constant true/false to the trivial set
--         filterNodes trivialFalse trivialTrue (Const nid False : nodes) =
--           filterNodes (IntSet.insert nid trivialFalse) trivialTrue nodes
--         filterNodes trivialFalse trivialTrue (Const nid True : nodes) =
--           filterNodes trivialFalse (IntSet.insert nid trivialTrue) nodes
--         -- Xor:
--         -- Remove trivial false inputs;
--         -- Remove inputs that appear an even number of times;
--         -- Remap trivial true inputs to the first constant true found.
--         filterNodes trivialFalse trivialTrue (Xor nid x y : nodes) =
--           Xor nid gatheredInputs : filterNodes trivialFalse trivialTrue nodes
--           where
--             gatheredInputs = IntSet.foldr xorGather IntSet.empty (IntSet.fromList [x, y])

--             xorGather inp gathered
--               -- Ignore trivial false inputs
--               | IntSet.member inp trivialFalse = gathered
--               -- Map trivial true to the one true ID (canceling it out if needed)
--               | IntSet.member inp trivialTrue = invertMembership trueId gathered
--               | otherwise = IntSet.insert inp gathered

--             invertMembership n s
--               | IntSet.member n s = IntSet.delete n s
--               | otherwise = IntSet.insert n s

--         -- And:
--         -- If any input is trivial false, add it to the trivial false set;
--         -- Remove any trivial true inputs;
--         --   If no inputs remain, add it to the trivial true set;
--         --   Otherwise include it with nontrivial inputs only.
--         filterNodes trivialFalse trivialTrue (And nid x y : nodes)
--           | not (IntSet.disjoint (IntSet.fromList [x, y]) trivialFalse) =
--               filterNodes (IntSet.insert nid trivialFalse) trivialTrue nodes
--           | IntSet.isSubsetOf (IntSet.fromList [x, y]) trivialTrue =
--               filterNodes (IntSet.insert nid trivialFalse) trivialTrue nodes
--           | otherwise =
--               And nid (IntSet.difference (IntSet.fromList [x, y]) trivialTrue)
--                 : filterNodes trivialFalse trivialTrue nodes
--   where
--     firstTrueConst [] = Nothing
--     firstTrueConst (Const nid True : _) = Just nid
--     firstTrueConst (_ : nodes) = firstTrueConst nodes

valid :: Graph -> Bool
valid (Graph {xagNodes = ns, inputOrder = inOrd, outputOrder = outOrd}) =
  -- node list is valid according to those basic rules
  validNodes ns
    -- no dups in the input order (that would mean a double-assignment)
    && (IntSet.size inOrdSet == length inOrd)
    -- inputOrder completely specifies the free variables (but inputs may be disconnected)
    && IntSet.isSubsetOf freeVarSet inOrdSet
    -- outputOrder may have dups
    -- outputOrder may only refer to inputOrder and actual outputs
    && IntSet.isSubsetOf outOrdSet (IntSet.union outSet inOrdSet)
  where
    inOrdSet = IntSet.fromList inOrd
    outOrdSet = IntSet.fromList outOrd
    freeVarSet = freeVariables ns
    outSet = outputs ns

-- checks properties of nodeId order and uniqueness, and acyclic refs
validNodes :: [Node] -> Bool
validNodes = validNodesAux 0
  where
    validNodesAux _ [] = True
    validNodesAux nextId (node : nodes) =
      validNode nextId node && validNodesAux (nodeId node + 1) nodes
    validNode nextId (Const n _) = n >= nextId
    validNode nextId (Not n x) = (n >= nextId) && validInput n x
    validNode nextId (Xor n x y) = (n >= nextId) && validInput n x && validInput n y
    validNode nextId (And n x y) = (n >= nextId) && validInput n x && validInput n y
    -- validNode nextId (Var n) = n >= nextId

    validInput :: Int -> Int -> Bool
    validInput n x = (x >= 0) && (x < n)

eval :: Graph -> [Bool] -> Maybe [Bool]
eval g@(Graph nodes inOrd outOrd) inVec
  | not (valid g) = Nothing
  | not (IntSet.null (freeVariables simNodes)) = Nothing
  | otherwise =
      let resMap = foldl doEval IntMap.empty simNodes
       in Just $ map (resMap IntMap.!) outOrd
  where
    doEval :: IntMap.IntMap Bool -> Node -> IntMap.IntMap Bool
    doEval res (Const nid val) = IntMap.insert nid val res
    doEval res (Not nid xId) = IntMap.insert nid (not $ res IntMap.! xId) res
    doEval res (Xor nid xId yId) = IntMap.insert nid ((res IntMap.! xId) `xor` (res IntMap.! yId)) res
    doEval res (And nid xId yId) = IntMap.insert nid ((res IntMap.! xId) .&. (res IntMap.! yId)) res

    simNodes = sort (fixVars ++ nodes)
    fixVars = zipWith Const inOrd inVec

-- andCost :: (Num b) => Graph a -> b
-- andCost g = eval g (+) (\x y -> x + y + 1) (const 0)

-- The Arbitrary makes a valid, arbitrary Graph with a gap for free variables,
-- and then a number of Not, Xor, and And nodes to fill the list to the
-- arbitrary size. Inputs are weighted to prefer earlier nodes, so as to bias
-- towards shallower graphs.
instance QC.Arbitrary Graph where
  arbitrary :: QC.Gen Graph
  arbitrary = do
    nNodes <- QC.getSize
    let nVars = (ceiling . sqrtFloat . fromIntegral) nNodes + 1
    nodes <- mapM genNode [nVars .. nVars + nNodes - 1]
    randIns <- QC.shuffle [0 .. nVars - 1]
    let allOutputs = map nodeId nodes
    outShuf <- QC.shuffle allOutputs
    randOuts <- QC.sublistOf outShuf
    return $ Graph {xagNodes = nodes, inputOrder = randIns, outputOrder = randOuts}
    where
      genNode n = do
        QC.frequency [(1, genConstNode n), (10, genNotNode n), (20, genXANode n)]

      genConstNode n = do
        val <- QC.oneof [return True, return False]
        return $ Const n val

      genNotNode n = do
        xInput <- genIndex n
        return $ Not n xInput

      genXANode n = QC.oneof [genBinary n Xor, genBinary n And]

      genBinary :: Int -> (Int -> Int -> Int -> Node) -> QC.Gen Node
      genBinary n xa = do
        xInput <- genIndex n
        yInput <- genIndex n
        return $ xa n xInput yInput

      genIndex 0 = undefined
      genIndex n = do
        unbiased <- QC.choose (0, n * n - 1)
        return $ unbiased `div` n
